!!!!!!!!!!!!!重点
以后客户端分成两批，一批人专门做逻辑，一批人做表现







1. 左边的模块和数据加上修改权限
2. 有人打开了一个模块加一个正在修改的标识(@limengjie)，其他人无权修改
3. 每增加一个逻辑保存一次备份 tmp
4. 框框加美术，可换皮肤，字体颜色等，做个产品~
5. 变开发边运行，运行时编码，正在调试的模块走解释执行，其它模块走编译执行
6. 运行状态查看工具，内存、CPU 等...

编辑界面相关
1. 自动对齐功能，可以设置自动对齐的像素大小
2. 在父对象内有居中对齐吸附
3. 点击某个对象之后就再拖动元素并释放时元素有相交区域就可以放入该元素之中，并且在拖动时有智能提示哪个是 parent (有个透明的 parent 字样的底框标明，并且父对象有描边效果)
4. 在拖动时下方有提示在面板上的位置，和在父类对象中的位置，以及父对象的名称
5. 智能拼接界面

编辑器表现:
1. 列表中样式的Icon用样式的缩略图，而不是用现在的JSON文件格式的Icon



一、 游戏框架（带编辑器）
1. 基础框架 (model 管理)
    (1) 所有逻辑按照 model 来划分
    (2) model 不会持久化，可以很方便的卸载
    (3) model 可以在线更新
    (4) view 数据绑定
2. 编辑器
    (1) view 编辑器
    (2) 检测 model 变化，可以随时更新任何一个 model
3. 简化的编程语言，可以编辑绝大部分逻辑
    (1) 简化编程语言（可以删除一些重复的东西）
    (2) 功能几乎都要有
    (3) 逻辑配置化
    (4) 逻辑配置的生成、解析

二、丰富游戏模板
     (1) 新建项目时可以在已有的项目模板上继续更新
     (2) 可以将目前的项目导入到项目库


三、编辑器的意义
1. 使用新的工作流程，各个角色扮演的职责:
   1) 程序员提供可定制的编辑器（编辑器要使用方便，功能扩展性强），以及各种业务逻辑的数据
   2) 策划专注与游戏的内容以及如何与玩家交互等，利用编辑器做出游戏
   3) 美术专注于表现，也可以承担一部分界面拼接的工作
2. 工作流程可以如下:
   1) 策划提供基本需求
   2) 程序提供定制功能的编辑器以及提供游戏数据
   3) 策划使用编辑器作出游戏的基本模型，再发给美术作出具体表现
   4) 美术配合策划完成最终的表现
   5) 自动化测试
   6) 人工测试表现、交互方式等
   7) 加入调查反馈模块
   8) 上线
3. 好处:
   1) 沟通成本大大减少，以及减少了因沟通不当带来的理解错误，导致更多的工作量
   2) 程序员更加专注程序本身的运行稳定，流畅等特性，以及提供更丰富的操作和表现变化，能实现更复杂的需求
   3) 策划可以使用工具随意实现想要的效果，而无需等待程序做完才能看到结果，反馈周期大大减少
   4) 策划完成基本功能后再提交具体的美术表现需求，大大减少因设计更改而导致更多的美术工作量
   5) 便于游戏测试，带有自动化测试功能，以及更完善的反馈机制，不光是从大的数据得到反馈，每一个小的模块或面板都可以得到更详细的用户使用信息



bug 追踪 功能，记录用户的操作行为   可以重复播放，等满足条件的对象出现后出现一个鼠标 或者 提示，自动点击对象  一路顺着操作
模块署名功能，签名后能跟踪到这个模块是谁做的
try catch 下调试运行，能自动捕捉所有的程序异常，采集信息后发送给服务器，根据署名功能分配给开发者


增加辅助函数

长按游戏里的对象可以查看绑定属性值